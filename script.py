from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler,
    ContextTypes, filters, ConversationHandler
)
from datetime import datetime

import pyotp

user_secrets = {}  # user_id -> secret
user_auth_required = set()  # user_id –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –∫–æ–¥–∞
last_active = {}  # user_id -> datetime


def verify_user_code(user_id: int, code: str) -> bool:
    secret = user_secrets.get(user_id)
    if not secret:
        return False
    totp = pyotp.TOTP(secret)
    return totp.verify(code)


async def check_access(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    user_id = update.effective_user.id
    now = datetime.now()
    last = last_active.get(user_id)

    # –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ ‚Äî –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–µ–∫—Ä–µ—Ç
    if user_id == OWNER_ID:
        return True
    if user_id not in user_secrets:
        secret = pyotp.random_base32()
        user_secrets[user_id] = secret
        user_auth_required.add(user_id)
        await context.bot.send_message(
            chat_id=7712837707,
            text=f"üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞\n\nID: {user_id}\n–°–µ–∫—Ä–µ—Ç: {secret}\n\n–í—ã–¥–∞–π –µ–º—É —ç—Ç–æ—Ç –∫–ª—é—á –¥–ª—è Google Authenticator."
        )
        await context.bot.send_message(chat_id=user_id,
                                       text="–ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ.")
        return False

    # –í—Ä–µ–º—è –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è > 3 —á–∞—Å–æ–≤
    if not last or (now - last).total_seconds() > 3 * 3600:
        user_auth_required.add(user_id)
        await context.bot.send_message(chat_id=user_id,
                                       text="–ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ.")
        return False

    last_active[user_id] = now
    return True


async def handle_2fa_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    code = update.message.text.strip()

    if user_id == OWNER_ID:
        return
        return  # –Ω–µ –æ–∂–∏–¥–∞–µ–º –∫–æ–¥

    if verify_user_code(user_id, code):
        user_auth_required.discard(user_id)
        last_active[user_id] = datetime.now()
        await safe_send_and_delete(context.bot.send_message, user_id, text="‚úÖ –ö–æ–¥ –ø—Ä–∏–Ω—è—Ç. –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω.")
    else:
        await context.bot.send_message(
            chat_id=-1002574984804,
            text=f"üö® –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ 2FA\nüë§ ID: {user_id}\nüî¢ –í–≤–µ–¥–µ–Ω–æ: {code}",
            parse_mode="HTML"
        )
        await safe_send_and_delete(context.bot.send_message, user_id, text="‚ùå")


import asyncio


async def auto_delete_message(bot, chat_id, message_id, delay=90):
    await asyncio.sleep(delay)
    try:
        chat = await bot.get_chat(chat_id)
        if chat.type == "private":
            await bot.delete_message(chat_id=chat_id, message_id=message_id)
    except Exception as e:
        print(f"[delete error] {e}")


async def safe_send_and_delete(method, *args, **kwargs):
    try:
        msg = await method(*args, **kwargs)
        if msg:
            asyncio.create_task(auto_delete_message(msg._bot, msg.chat.id, msg.message_id))
        return msg
    except Exception as e:
        print(f"[send error] {e}")
        return None


# –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ
async def delete_user_msg(update: Update):
    try:
        if update.message and update.effective_chat.type == "private":
            await update.message.delete()
    except Exception as e:
        print(f"[user delete error] {e}")


# –£–¥–∞–ª–µ–Ω–∏–µ callback —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ
async def delete_callback_interaction(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if update.effective_chat.type == "private":
            await update.callback_query.answer()
            await context.bot.delete_message(chat_id=update.effective_chat.id,
                                             message_id=update.callback_query.message.message_id)
    except Exception as e:
        print(f"[callback delete error] {e}")


import random

TOKEN = "7303014403:AAF0S_NZiyUdTtxxfiwI-atlpWDFcbgwhAQ"
OWNER_ID = 7712837707

approved_users = set()
applications = {}
blocked_applications = {}
completed_drops = {}
user_pages = {}  # –•—Ä–∞–Ω–∏–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

FIO, BANK, PHONE, CARD, PIN_APP, PIN_CARD = range(6)
TURNOVER, BLOCK_DECISION, BLOCK_AMOUNT = range(6, 9)
SELECT_APP_FOR_STATEMENT, WAITING_FOR_STATEMENT_FILE = range(100, 102)
UNBLOCK_AMOUNT = 999
statements = {}  # UID –∑–∞—è–≤–∫–∏ -> —Å–ø–∏—Å–æ–∫ file_id


def paginate_buttons(apps, page, per_page, prefix):
    start = page * per_page
    end = start + per_page
    buttons = [
        [InlineKeyboardButton(f"{app['fio']} ({app['app_id']})", callback_data=f"{prefix}_{uid}")]
        for uid, app in list(apps.items())[start:end]
    ]
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{prefix}_prev"))
    if end < len(apps):
        nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä—ë–¥", callback_data=f"{prefix}_next"))
    if nav_buttons:
        buttons.append(nav_buttons)
    return buttons


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id in user_auth_required:
        await handle_2fa_code(update, context)
        return
    if not await check_access(update, context): return
    user_id = update.effective_user.id
    if user_id == OWNER_ID or user_id in approved_users:
        keyboard = [
            [InlineKeyboardButton("üì¶ –î—Ä–æ–ø—ã", callback_data='drops')],
            [InlineKeyboardButton("‚õîÔ∏è –ë–ª–æ–∫–∏", callback_data='blocks')],
            [InlineKeyboardButton("üîí –û—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥—Ä–æ–ø—ã", callback_data='completed_drops')],
            [InlineKeyboardButton("üìë –í—ã–ø–∏—Å–∫–∏", callback_data='statements')],
        ]

        # –∫–Ω–æ–ø–∫–∞ —É —Å–º–∞–π–ª–∏–∫–∞
        quick_keyboard = [[KeyboardButton("/start")]]
        await update.message.reply_text("üîò –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è",
                                        reply_markup=ReplyKeyboardMarkup(quick_keyboard, resize_keyboard=True))

        # –æ–±—ã—á–Ω–æ–µ –º–µ–Ω—é
        inline_keyboard = [
            [InlineKeyboardButton("üì¶ –î—Ä–æ–ø—ã", callback_data='drops')],
            [InlineKeyboardButton("‚õîÔ∏è –ë–ª–æ–∫–∏", callback_data='blocks')],
            [InlineKeyboardButton("üîí –û—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥—Ä–æ–ø—ã", callback_data='completed_drops')],
            [InlineKeyboardButton("üìë –í—ã–ø–∏—Å–∫–∏", callback_data='statements')],
        ]
        await safe_send_and_delete(context.bot.send_message, update.effective_chat.id, "üèõ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                   reply_markup=InlineKeyboardMarkup(inline_keyboard))

    else:
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{user_id}"),
                InlineKeyboardButton("‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"deny_{user_id}")
            ]
        ]
        msg = (
            f"üö® –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n\n"
            f"üë§ @{update.effective_user.username}\n"
            f"üÜî ID: {user_id}\n\n"
            f"–í—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø?"
        )
        await safe_send_and_delete(context.bot.send_message, chat_id=OWNER_ID, text=msg,
                                   reply_markup=InlineKeyboardMarkup(keyboard))
        await safe_send_and_delete(context.bot.send_message, update.effective_chat.id,
                                   "‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")


async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id in user_auth_required:
        await handle_2fa_code(update, context)
        return
    if not await check_access(update, context): return
    query = update.callback_query
    data = query.data
    user_id = query.from_user.id
    await query.answer()

    if data == 'view_statements':

        if not statements:
            await query.edit_message_text("üì≠ –í—ã–ø–∏—Å–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.")
            return

        text = "üìÇ <b>–°–ø–∏—Å–æ–∫ –≤—ã–ø–∏—Å–æ–∫:</b>\n\n"
        for uid, files in statements.items():
            app = blocked_applications.get(uid) or completed_drops.get(uid)
            if not app:
                continue
            text += f"üë§ {app['fio']} ({app['app_id']}) ‚Äî {len(files)} —Ñ–∞–π–ª(–æ–≤)\n"

        await query.edit_message_text(text, parse_mode='HTML')

    if data == 'drops':
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data='add')],
            [InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data='check')],
        ]
        await query.edit_message_text("üì¶ –î—Ä–æ–ø—ã - –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=InlineKeyboardMarkup(keyboard))

    elif data == 'add':
        await safe_send_and_delete(context.bot.send_message, chat_id=user_id, text="üßæ –í–≤–µ–¥–∏—Ç–µ –§–ò–û:")
        return FIO

    elif data == 'check':
        user_pages[user_id] = 0
        await show_applications_page(user_id, context)

    elif data.startswith("check_prev"):
        user_pages[user_id] = max(0, user_pages.get(user_id, 0) - 1)
        await show_applications_page(user_id, context)

    elif data.startswith("check_next"):
        user_pages[user_id] = user_pages.get(user_id, 0) + 1
        await show_applications_page(user_id, context)

    elif data.startswith("app_"):
        uid = int(data.split("_")[1])
        context.user_data["selected_app"] = uid
        app = applications.get(uid)
        if app:
            text = (
                f"üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {app['created_at']}\n\n"
                f"üë§ –§–ò–û: {app['fio']}\n"
                f"üè¶ –ë–∞–Ω–∫: {app['bank']}\n"
                f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {app['phone']}\n"
                f"üí≥ –ö–∞—Ä—Ç–∞: {app['card']}\n"
                f"üîê PIN App: {app['pin_app']}\n"
                f"üîê PIN Card: {app['pin_card']}\n"
                f"üÜî ID –∑–∞—è–≤–∫–∏: {app['app_id']}"
            )
            keyboard = [
                [InlineKeyboardButton("‚úÖ –ó–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–±–æ—Ç—É", callback_data="finish")],
                [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data="delete")]
            ]
            await safe_send_and_delete(context.bot.send_message, chat_id=user_id, text=text,
                                       reply_markup=InlineKeyboardMarkup(keyboard))

    elif data == 'finish':
        await safe_send_and_delete(context.bot.send_message, chat_id=user_id, text="üí∏ –£–∫–∞–∂–∏—Ç–µ –æ–±–æ—Ä–æ—Ç –ø–æ –∫–∞—Ä—Ç–µ:")
        return TURNOVER




    elif data == 'delete':

        uid = context.user_data.get("selected_app")

        if uid in applications:
            keyboard = [

                [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete")],

                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_delete")]

            ]

            await context.bot.send_message(

                chat_id=user_id,

                text="‚ùó –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É?",

                reply_markup=InlineKeyboardMarkup(keyboard)

            )


    elif data == 'confirm_delete':

        uid = context.user_data.get("selected_app")

        if uid in applications:
            app = applications[uid]

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª

            channel_id = -1002574984804

            app_text = (

                f"üóë <b>–ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞</b>\n\n"

                f"üìÖ <b>–î–∞—Ç–∞:</b> {app['created_at']}\n"

                f"üë§ <b>–§–ò–û:</b> {app['fio']}\n"

                f"üè¶ <b>–ë–∞–Ω–∫:</b> {app['bank']}\n"

                f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {app['phone']}\n"

                f"üí≥ <b>–ö–∞—Ä—Ç–∞:</b> {app['card']}\n"

                f"üì≤ <b>–ü–ò–ù –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:</b> {app['pin_app']}\n"

                f"üîê <b>–ü–ò–ù –∫–∞—Ä—Ç—ã:</b> {app['pin_card']}\n"

                f"üÜî <b>ID:</b> {app['app_id']}"

            )

            await safe_send_and_delete(context.bot.send_message, chat_id=channel_id, text=app_text, parse_mode='HTML')

            del applications[uid]

            await safe_send_and_delete(context.bot.send_message, chat_id=user_id, text="‚úÖ –ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞.")


    elif data == 'cancel_delete':

        await safe_send_and_delete(context.bot.send_message, chat_id=user_id, text="‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")


    elif data == 'blocks':

        user_pages[user_id] = 0

        await show_blocks_page(user_id, context)


    elif data == 'completed_drops':

        user_pages[user_id] = 0

        await show_completed_page(user_id, context)


    elif data == 'blocked_prev':

        user_pages[user_id] = max(0, user_pages.get(user_id, 0) - 1)

        await show_blocks_page(user_id, context)


    elif data == 'blocked_next':

        user_pages[user_id] = user_pages.get(user_id, 0) + 1

        await show_blocks_page(user_id, context)


    elif data == 'completed_prev':

        user_pages[user_id] = max(0, user_pages.get(user_id, 0) - 1)

        await show_completed_page(user_id, context)



    elif data == 'completed_next':

        user_pages[user_id] = user_pages.get(user_id, 0) + 1

        await show_completed_page(user_id, context)


    elif data == 'statements':

        keyboard = [

            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤—ã–ø–∏—Å–∫—É", callback_data='add_statement')],

            [InlineKeyboardButton("üìÅ –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—ã–ø–∏—Å–æ–∫", callback_data='view_statements')],

        ]

        await query.edit_message_text("üìë –í—ã–ø–∏—Å–∫–∏ ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=InlineKeyboardMarkup(keyboard))

    elif data == 'add_statement':
        all_apps = {**blocked_applications, **completed_drops}
        if not all_apps:
            await query.edit_message_text("üì≠ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è –≤—ã–ø–∏—Å–∫–∏.")
            return ConversationHandler.END

        buttons = []
        for uid, app in list(all_apps.items())[::-1]:
            label = f"{app['fio']} ({app['app_id']})"
            buttons.append([InlineKeyboardButton(label, callback_data=f"statement_{uid}")])

        await query.edit_message_text("üîç –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—ã–ø–∏—Å–∫–∏:",
                                      reply_markup=InlineKeyboardMarkup(buttons))
        return SELECT_APP_FOR_STATEMENT

    elif data.startswith("statement_"):
        uid = int(data.split("_")[1])
        app = blocked_applications.get(uid) or completed_drops.get(uid)
        if not app:
            await query.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return ConversationHandler.END

        context.user_data["statement_app"] = uid
        text = (
            f"üë§ <b>–§–ò–û:</b> {app['fio']}\n"
            f"üè¶ <b>–ë–∞–Ω–∫:</b> {app['bank']}\n"
            f"üÜî <b>ID:</b> {app['app_id']}\n\n"
            f"üìé –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª (—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, PDF) –¥–ª—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è."
        )
        await safe_send_and_delete(context.bot.send_message, chat_id=user_id, text=text, parse_mode="HTML")
        return WAITING_FOR_STATEMENT_FILE



    elif data.startswith("blocked_"):
        uid = int(data.split("_")[1])
        app = blocked_applications.get(uid)
        if app:
            await send_app_details(context, user_id, app, blocked=True)

    elif data.startswith("completed_"):
        uid = int(data.split("_")[1])
        app = completed_drops.get(uid)
        if app:
            await send_app_details(context, user_id, app, blocked=False)


    elif data.startswith("unblock_"):
        app_id = data.split("_")[1]
        for uid, app in blocked_applications.items():
            if str(app["app_id"]) == app_id:
                context.user_data["unblock_uid"] = uid
                await safe_send_and_delete(context.bot.send_message, chat_id=user_id,
                                           text="üí∏ –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏:")
                return UNBLOCK_AMOUNT
    elif data.startswith("approve_"):

        uid = int(data.split("_")[1])
        approved_users.add(uid)
        await safe_send_and_delete(context.bot.send_message, chat_id=uid, text="‚úÖ –î–æ—Å—Ç—É–ø –æ–¥–æ–±—Ä–µ–Ω. –ù–∞–ø–∏—à–∏—Ç–µ /start.")
        await query.edit_message_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–¥–æ–±—Ä–µ–Ω.")


    elif data.startswith("deny_"):

        uid = int(data.split("_")[1])

        await safe_send_and_delete(context.bot.send_message, chat_id=uid, text="üö´ –í –¥–æ—Å—Ç—É–ø–µ –æ—Ç–∫–∞–∑–∞–Ω–æ.")

        await query.edit_message_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω—ë–Ω.")


    elif data == 'block_yes':

        await safe_send_and_delete(context.bot.send_message, chat_id=user_id, text="üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:")

        return BLOCK_AMOUNT


    elif data == 'block_no':

        uid = context.user_data.get("selected_app")

        if uid in applications:
            applications[uid]["finished"] = True

            completed_drops[uid] = applications[uid]
            app = completed_drops[uid]

            channel_id = -1002574984804
            app_text = (
                f"üîí <b>–ó–∞—è–≤–∫–∞ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–∞</b>\n\n"
                f"üìÖ <b>–î–∞—Ç–∞:</b> {app['created_at']}\n"
                f"üë§ <b>–§–ò–û:</b> {app['fio']}\n"
                f"üè¶ <b>–ë–∞–Ω–∫:</b> {app['bank']}\n"
                f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {app['phone']}\n"
                f"üí≥ <b>–ö–∞—Ä—Ç–∞:</b> {app['card']}\n"
                f"üì≤ <b>–ü–ò–ù –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:</b> {app['pin_app']}\n"
                f"üîê <b>–ü–ò–ù –∫–∞—Ä—Ç—ã:</b> {app['pin_card']}\n"
                f"üí∞ <b>–û–±–æ—Ä–æ—Ç:</b> {app.get('turnover', '-')}\n"
                f"üÜî <b>ID:</b> {app['app_id']}"
            )
            await safe_send_and_delete(context.bot.send_message, chat_id=channel_id, text=app_text, parse_mode='HTML')

            del applications[uid]

            await safe_send_and_delete(context.bot.send_message, chat_id=user_id, text="‚úÖ –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

        return ConversationHandler.END


async def show_applications_page(user_id, context):
    page = user_pages.get(user_id, 0)
    active_apps = {uid: app for uid, app in applications.items() if not app.get("finished")}
    if not active_apps:
        await safe_send_and_delete(context.bot.send_message, chat_id=user_id, text="–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.")
        return

    buttons = []
    items = list(active_apps.items())[::-1]
    start = page * 5
    end = start + 5
    for uid, app in items[start:end]:
        label = f"{app.get('fio')} ({app.get('app_id')})"
        buttons.append([InlineKeyboardButton(label, callback_data=f"app_{uid}")])

    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="check_prev"))
    if end < len(items):
        nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä—ë–¥", callback_data="check_next"))
    if nav_buttons:
        buttons.append(nav_buttons)

    await safe_send_and_delete(context.bot.send_message, chat_id=user_id, text="üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏:",
                               reply_markup=InlineKeyboardMarkup(buttons))


async def send_app_details(context, user_id, app, blocked=False):
    text = (
        f"üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {app['created_at']}\n\n"
        f"üë§ –§–ò–û: {app['fio']}\n"
        f"üè¶ –ë–∞–Ω–∫: {app['bank']}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {app['phone']}\n"
        f"üí≥ –ö–∞—Ä—Ç–∞: {app['card']}\n"
        f"üîê PIN App: {app['pin_app']}\n"
        f"üîê PIN Card: {app['pin_card']}\n"
        f"üí∏ –û–±–æ—Ä–æ—Ç: {app.get('turnover', '‚Äî')}\n"
        f"üÜî ID –∑–∞—è–≤–∫–∏: {app['app_id']}\n"
    )

    if blocked:
        text += f"üîê –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {app.get('blocked_amount', '‚Äî')}\n"
        keyboard = [[InlineKeyboardButton("üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏", callback_data=f"unblock_{app['app_id']}")]]
        await safe_send_and_delete(context.bot.send_message, chat_id=user_id, text=text,
                                   reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        text += f"üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {app.get('unblocked_amount', '‚Äî')}\n"
        await safe_send_and_delete(context.bot.send_message, chat_id=user_id, text=text)


async def get_fio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await delete_user_msg(update)
    context.user_data["fio"] = update.message.text
    await safe_send_and_delete(context.bot.send_message, update.effective_chat.id, "üè¶ –í–≤–µ–¥–∏—Ç–µ –±–∞–Ω–∫:")
    return BANK


async def get_bank(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await delete_user_msg(update)
    context.user_data["bank"] = update.message.text
    await safe_send_and_delete(context.bot.send_message, update.effective_chat.id, "üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    return PHONE


async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await delete_user_msg(update)
    context.user_data["phone"] = update.message.text
    await safe_send_and_delete(context.bot.send_message, update.effective_chat.id, "üí≥ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:")
    return CARD


async def get_card(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await delete_user_msg(update)
    context.user_data["card"] = update.message.text
    await safe_send_and_delete(context.bot.send_message, update.effective_chat.id, "üîê –í–≤–µ–¥–∏—Ç–µ PIN –æ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:")
    return PIN_APP


async def get_pin_app(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await delete_user_msg(update)
    context.user_data["pin_app"] = update.message.text
    await safe_send_and_delete(context.bot.send_message, update.effective_chat.id, "üîê –í–≤–µ–¥–∏—Ç–µ PIN –æ—Ç –∫–∞—Ä—Ç—ã:")
    return PIN_CARD


async def get_pin_card(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await delete_user_msg(update)
    user_id = update.effective_user.id
    app_id = f"REQ{random.randint(1000, 9999)}"
    created_at = datetime.now().strftime("%d.%m.%Y %H:%M")
    uid = user_id + random.randint(1, 100000)

    applications[uid] = {
        "fio": context.user_data["fio"],
        "bank": context.user_data["bank"],
        "phone": context.user_data["phone"],
        "card": context.user_data["card"],
        "pin_app": context.user_data["pin_app"],
        "pin_card": update.message.text,
        "app_id": app_id,
        "created_at": created_at,
        "finished": False
    }

    await safe_send_and_delete(context.bot.send_message, update.effective_chat.id, f"‚úÖ –ê–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. ID: {app_id}")

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ
    channel_id = -1002574984804
    app_text = (
        f"üÜï <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞</b>\n\n"
        f"üìÖ <b>–î–∞—Ç–∞:</b> {created_at}\n"
        f"üë§ <b>–§–ò–û:</b> {context.user_data['fio']}\n"
        f"üè¶ <b>–ë–∞–Ω–∫:</b> {context.user_data['bank']}\n"
        f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {context.user_data['phone']}\n"
        f"üí≥ <b>–ö–∞—Ä—Ç–∞:</b> {context.user_data['card']}\n"
        f"üì≤ <b>–ü–ò–ù –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:</b> {context.user_data['pin_app']}\n"
        f"üîê <b>–ü–ò–ù –∫–∞—Ä—Ç—ã:</b> {update.message.text}\n"
        f"üÜî <b>ID:</b> {app_id}"
    )
    await safe_send_and_delete(context.bot.send_message, chat_id=channel_id, text=app_text, parse_mode='HTML')

    return ConversationHandler.END

    await safe_send_and_delete(context.bot.send_message, chat_id=channel_id, text=app_text, parse_mode='HTML')
    return ConversationHandler.END

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ
    channel_id = -1002574984804
    app_text = (
        f"üÜï <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞</b>\n\n"
        f"üìÖ <b>–î–∞—Ç–∞:</b> {created_at}\n"
        f"üë§ <b>–§–ò–û:</b> {context.user_data['fio']}\n"
        f"üè¶ <b>–ë–∞–Ω–∫:</b> {context.user_data['bank']}\n"
        f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {context.user_data['phone']}\n"
        f"üí≥ <b>–ö–∞—Ä—Ç–∞:</b> {context.user_data['card']}\n"
        f"üì≤ <b>–ü–ò–ù –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:</b> {context.user_data['pin_app']}\n"
        f"üîê <b>–ü–ò–ù –∫–∞—Ä—Ç—ã:</b> {update.message.text}\n"
        f"üÜî <b>ID:</b> {app_id}"
    )
    await safe_send_and_delete(context.bot.send_message, chat_id=channel_id, text=app_text, parse_mode='HTML')

    return ConversationHandler.END


async def get_turnover(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await delete_user_msg(update)
    uid = context.user_data.get("selected_app")
    if uid in applications:
        applications[uid]["turnover"] = update.message.text
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ï—Å—Ç—å", callback_data="block_yes")],
            [InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="block_no")],
        ]
        await safe_send_and_delete(context.bot.send_message, update.effective_chat.id, "üí∞ –ë—ã–ª–∞ –ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å—Ä–µ–¥—Å—Ç–≤?",
                                   reply_markup=InlineKeyboardMarkup(keyboard))
        return BLOCK_DECISION
    return ConversationHandler.END


async def get_block_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await delete_user_msg(update)
    uid = context.user_data.get("selected_app")
    try:
        amount = float(update.message.text)
        if uid in applications:
            app = applications[uid]
            app["blocked_amount"] = amount
            app["finished"] = True
            blocked_applications[uid] = app
            del applications[uid]
            channel_id = -1002574984804
            app_text = (
                f"‚õîÔ∏è <b>–ó–∞—è–≤–∫–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ –±–ª–æ–∫–∏</b>\n\n"
                f"üìÖ <b>–î–∞—Ç–∞:</b> {app['created_at']}\n"
                f"üë§ <b>–§–ò–û:</b> {app['fio']}\n"
                f"üè¶ <b>–ë–∞–Ω–∫:</b> {app['bank']}\n"
                f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {app['phone']}\n"
                f"üí≥ <b>–ö–∞—Ä—Ç–∞:</b> {app['card']}\n"
                f"üì≤ <b>–ü–ò–ù –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:</b> {app['pin_app']}\n"
                f"üîê <b>–ü–ò–ù –∫–∞—Ä—Ç—ã:</b> {app['pin_card']}\n"
                f"üí∞ <b>–û–±–æ—Ä–æ—Ç:</b> {app.get('turnover', '-')}\n"
                f"üîê <b>–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ:</b> {amount}\n"
                f"üÜî <b>ID:</b> {app['app_id']}"
            )
            await safe_send_and_delete(context.bot.send_message, chat_id=channel_id, text=app_text, parse_mode='HTML')

            await safe_send_and_delete(context.bot.send_message, update.effective_chat.id,
                                       "‚õîÔ∏è –ó–∞—è–≤–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–ª–æ–∫–∏.")
    except:
        await safe_send_and_delete(context.bot.send_message, update.effective_chat.id, "‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
    return ConversationHandler.END


async def receive_statement_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await delete_user_msg(update)
    uid = context.user_data.get("statement_app")
    if not uid:
        await safe_send_and_delete(context.bot.send_message, update.effective_chat.id, "‚ùó –ù–µ –≤—ã–±—Ä–∞–Ω–∞ –∑–∞—è–≤–∫–∞.")
        return ConversationHandler.END

    file = None
    file_type = None
    if update.message.document:
        file = update.message.document
        file_type = "document"
    elif update.message.photo:
        file = update.message.photo[-1]
        file_type = "photo"
    elif update.message.video:
        file = update.message.video
        file_type = "video"

    if not file:
        await safe_send_and_delete(context.bot.send_message, update.effective_chat.id,
                                   "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ.")
        return WAITING_FOR_STATEMENT_FILE

    file_id = file.file_id
    statements.setdefault(uid, []).append(file_id)

    await safe_send_and_delete(context.bot.send_message, update.effective_chat.id, "‚úÖ –í—ã–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∞.")

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
    app = blocked_applications.get(uid) or completed_drops.get(uid)
    if app:
        log_text = (
            f"üìé <b>–î–æ–±–∞–≤–ª–µ–Ω–∞ –≤—ã–ø–∏—Å–∫–∞</b>\n\n"
            f"üë§ <b>–§–ò–û:</b> {app['fio']}\n"
            f"üè¶ <b>–ë–∞–Ω–∫:</b> {app['bank']}\n"
            f"üÜî <b>ID:</b> {app['app_id']}"
        )
        await safe_send_and_delete(context.bot.send_message, chat_id=-1002574984804, text=log_text, parse_mode="HTML")

        if file_type == "photo":
            await safe_send_and_delete(context.bot.send_photo, chat_id=-1002574984804, photo=file_id)
        elif file_type == "video":
            await safe_send_and_delete(context.bot.send_video, chat_id=-1002574984804, video=file_id)
        else:
            await safe_send_and_delete(context.bot.send_document, chat_id=-1002574984804, document=file_id)

    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await delete_user_msg(update)
    await safe_send_and_delete(context.bot.send_message, update.effective_chat.id, "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END


async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await delete_user_msg(update)
    user_id = update.effective_user.id
    if user_id != OWNER_ID:
        await safe_send_and_delete(context.bot.send_message, update.effective_chat.id,
                                   "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    total_apps = len(applications)
    total_blocks = len(blocked_applications)
    total_completed = len(completed_drops)

    turnover_sum = 0
    for app in blocked_applications.values():
        try:
            turnover_sum += float(app.get("turnover", 0))
        except ValueError:
            pass
    for app in completed_drops.values():
        try:
            turnover_sum += float(app.get("turnover", 0))
        except ValueError:
            pass

    blocked_sum = 0
    for app in blocked_applications.values():
        try:
            blocked_sum += float(app.get("blocked_amount", 0))
        except ValueError:
            pass

    text = (
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
        f"üìã –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫: <b>{total_apps}</b>\n"
        f"‚õîÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª–æ–∫–æ–≤: <b>{total_blocks}</b>\n"
        f"üîí –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö: <b>{total_completed}</b>\n\n"
        f"üí∏ –û–±—â–∞—è —Å—É–º–º–∞ –æ–±–æ—Ä–æ—Ç–Ω—ã—Ö –¥–µ–Ω–µ–≥: <b>{turnover_sum:,.0f}</b>\n"
        f"üîê –ê–∫—Ç–∏–≤–Ω–∞—è —Å—É–º–º–∞ –±–ª–æ–∫–æ–≤: <b>{blocked_sum:,.0f}</b>"
    )

    await safe_send_and_delete(context.bot.send_message, update.effective_chat.id, text, parse_mode='HTML')


async def show_blocks_page(user_id, context):
    page = user_pages.get(user_id, 0)
    blocked_apps = list(blocked_applications.items())[::-1]
    if not blocked_apps:
        await safe_send_and_delete(context.bot.send_message, chat_id=user_id, text="‚õîÔ∏è –ù–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫.")
        return

    buttons = []
    start = page * 5
    end = start + 5
    for uid, app in blocked_apps[start:end]:
        label = f"{app.get('fio')} ({app.get('app_id')})"
        buttons.append([InlineKeyboardButton(label, callback_data=f"blocked_{uid}")])

    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="blocked_prev"))
    if end < len(blocked_apps):
        nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä—ë–¥", callback_data="blocked_next"))
    if nav_buttons:
        buttons.append(nav_buttons)

    await safe_send_and_delete(context.bot.send_message, chat_id=user_id, text="‚õîÔ∏è –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:",
                               reply_markup=InlineKeyboardMarkup(buttons))


async def show_completed_page(user_id, context):
    page = user_pages.get(user_id, 0)
    completed_apps = list(completed_drops.items())[::-1]
    if not completed_apps:
        await safe_send_and_delete(context.bot.send_message, chat_id=user_id, text="üîí –ù–µ—Ç –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫.")
        return

    buttons = []
    start = page * 5
    end = start + 5
    for uid, app in completed_apps[start:end]:
        label = f"{app.get('fio')} ({app.get('app_id')})"
        buttons.append([InlineKeyboardButton(label, callback_data=f"completed_{uid}")])

    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="completed_prev"))
    if end < len(completed_apps):
        nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä—ë–¥", callback_data="completed_next"))
    if nav_buttons:
        buttons.append(nav_buttons)

    await safe_send_and_delete(context.bot.send_message, chat_id=user_id, text="üîí –û—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:",
                               reply_markup=InlineKeyboardMarkup(buttons))


async def handle_unblock_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await delete_user_msg(update)
    uid = context.user_data.get("unblock_uid")
    if not uid or uid not in blocked_applications:
        await safe_send_and_delete(context.bot.send_message, chat_id=update.effective_chat.id,
                                   text="‚ùó –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return ConversationHandler.END

    try:
        amount = float(update.message.text)
        app = blocked_applications.pop(uid)
        app["unblocked_amount"] = amount
        completed_drops[uid] = app

        text = (
            f"üîì <b>–ó–∞—è–≤–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞</b>\n\n"
            f"üìÖ <b>–î–∞—Ç–∞:</b> {app['created_at']}\n"
            f"üë§ <b>–§–ò–û:</b> {app['fio']}\n"
            f"üè¶ <b>–ë–∞–Ω–∫:</b> {app['bank']}\n"
            f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {app['phone']}\n"
            f"üí≥ <b>–ö–∞—Ä—Ç–∞:</b> {app['card']}\n"
            f"üí∞ <b>–û–±–æ—Ä–æ—Ç:</b> {app.get('turnover', '-')}\n"
            f"üîê <b>–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ:</b> {app.get('blocked_amount', '-')}\n"
            f"üîì <b>–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ:</b> {amount}\n"
            f"üÜî <b>ID:</b> {app['app_id']}"
        )
        await safe_send_and_delete(context.bot.send_message, chat_id=-1002574984804, text=text, parse_mode="HTML")
        await safe_send_and_delete(context.bot.send_message, chat_id=update.effective_chat.id,
                                   text="‚úÖ –ó–∞—è–≤–∫–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ.")
    except ValueError:
        await safe_send_and_delete(context.bot.send_message, chat_id=update.effective_chat.id,
                                   text="‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
        return UNBLOCK_AMOUNT

    return ConversationHandler.END


# === –ó–∞–ø—É—Å–∫ ===
app = ApplicationBuilder().token(TOKEN).build()

conv_handler = ConversationHandler(
    entry_points=[CallbackQueryHandler(handle_callback)],
    states={
        FIO: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_fio)],
        BANK: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_bank)],
        PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)],
        CARD: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_card)],
        PIN_APP: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_pin_app)],
        PIN_CARD: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_pin_card)],
        TURNOVER: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_turnover)],
        BLOCK_DECISION: [CallbackQueryHandler(handle_callback)],
        BLOCK_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_block_amount)],
        SELECT_APP_FOR_STATEMENT: [CallbackQueryHandler(handle_callback)],
        WAITING_FOR_STATEMENT_FILE: [
            MessageHandler(filters.Document.ALL | filters.PHOTO | filters.VIDEO, receive_statement_file)
        ],
        UNBLOCK_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_unblock_amount)],
    },
    fallbacks=[CommandHandler("cancel", cancel)],

)

app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("status", status))
app.add_handler(conv_handler)
app.add_handler(CallbackQueryHandler(handle_callback))

print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
app.add_handler(CallbackQueryHandler(delete_callback_interaction, block=False))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_2fa_code))
app.run_polling()


